#BlueJ class context
comment0.target=Expressions
comment0.text=\n\ Expressions\ class\ providing\ static\ util\ methods\n\ to\ 1)\ convert\ infix\ to\ postfix\n\ \ \ \ 2)\ evaluate\ a\ postfix\ expression\n\ or\ 3)\ check\ if\ parens\ are\ balanced\n\ \n\ @author\ Anu\ Datar\n\ @author\ Grant\ Yang\n\ @version\ 10/27/2017\n\ 2021.11.08\n
comment1.params=opener\ closer
comment1.target=boolean\ corresponds(java.lang.String,\ java.lang.String)
comment1.text=\n\ Check\ if\ two\ parens\ correspond\n\ @param\ opener\ Single-char\ string\ of\ the\ opening\ paren\n\ @param\ closer\ Single-char\ string\ of\ the\ closing\ paren\n\ @return\ True\ if\ the\ opener\ matches\ the\ closer\n
comment10.params=expr
comment10.target=double\ evalPostfix(java.lang.String)
comment10.text=\n\ returns\ the\ value\ of\ an\ expression\ in\ postfix\ form\n\ does\ this\ computation\ using\ a\ Stack.\n\n\ For\ this\ implementation,\ operands\ and\ operators\ need\ not\ be\ separated\ by\ spaces\!\n\n\ @param\ expr\ valid\ expression\ in\ postfix\ form\n\ @return\ value\ of\ the\ expression\n\ @precondition\ postfix\ expression\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ contains\ numbers\ and\ operators\ +\ -\ *\ /\ and\ %\n
comment11.params=args
comment11.target=void\ main(java.lang.String[])
comment11.text=\n\ Tester\ to\ check\ if\ infix\ to\ postfix\ and\ evaluate\ postfix\ work\ well\n\ @param\ args\ Command\ line\ arguments\n
comment12.params=expr\ expect
comment12.target=void\ test(java.lang.String,\ double)
comment12.text=\n\ Tests\ an\ infix\ expression,\ expecting\ it\ to\ have\ a\ certain\ value\n\ @param\ expr\ Infix\ expression\n\ @param\ expect\ Expected\ value\n
comment13.params=ex\ expected
comment13.target=void\ testBalanced(java.lang.String,\ boolean)
comment13.text=\n\ Tests\ matchParenthesis()\ on\ a\ string\ with\ an\ expected\ value\n\ @param\ ex\ Expression\ to\ test\n\ @param\ expected\ Expected\ return\ value\ (true\ if\ parens\ are\ matched)\n
comment2.params=c
comment2.target=boolean\ isOperator(java.lang.String)
comment2.text=\n\ Checks\ if\ a\ single-character\ string\ is\ a\ valid\ binary\ operator\n\ @param\ c\ String\ to\ check\n\ @return\ True\ if\ c\ is\ one\ of\ +\ -\ *\ /\ %\n
comment3.params=c
comment3.target=boolean\ isOpenParen(java.lang.String)
comment3.text=\n\ Checks\ if\ a\ single\ character\ string\ is\ an\ opening\ paren\n\ @param\ c\ String\ to\ check\n\ @return\ true\ if\ c\ is\ one\ of\ (\ [\ {\n
comment4.params=c
comment4.target=boolean\ isCloseParen(java.lang.String)
comment4.text=\n\ Checks\ if\ a\ single\ character\ string\ is\ a\ closing\ paren\n\ @param\ c\ String\ to\ check\n\ @return\ True\ if\ c\ is\ one\ of\ )\ ]\ }\n
comment5.params=op
comment5.target=int\ precedence(java.lang.String)
comment5.text=\n\ Gets\ the\ precedence\ of\ an\ operator\n\ @param\ op\ A\ valid\ operator\ from\ isOperator()\ or\ an\ opening\ paren\n\ @return\ 1\ for\ +\ -,\ 2\ for\ *\ /\ %,\ and\ -999\ for\ an\ open\ paren\n
comment6.params=expression
comment6.target=boolean\ matchParenthesis(java.lang.String)
comment6.text=\n\ parenthesis\ matching\ \:\ An\ expression\ is\ said\ to\ be\ balanced\ if\n\ every\ opener\ has\ a\ corresponding\ closer,\ in\ the\ right\ order\n\ {,\ [\ or\ (\ are\ the\ only\ types\ of\ brackets\ allowed\n\ @param\ expression\ Expression\ containing\ operands,\ operators,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ and\ any\ of\ the\ 3\ supported\ brackets\n\ @return\ true\ is\ the\ parenthesis\ are\ balanced\n\ \ \ \ \ \ \ \ \ false\ otherwise\n
comment7.params=s
comment7.target=boolean\ isDigit(java.lang.String)
comment7.text=\n\ Queries\ if\ a\ single-character\ string\ is\ a\ numerical\ digit\n\ @param\ s\ String\ to\ check\n\ @return\ True\ if\ s\ is\ one\ of\ 0123456789\n
comment8.params=expr
comment8.target=java.lang.String\ infixToPostfix(java.lang.String)
comment8.text=\n\ returns\ a\ string\ in\ postfix\ form\n\ if\ given\ an\ expression\ in\ infix\ form\ as\ a\ parameter\n\ does\ this\ conversion\ using\ a\ Stack\n\ @precondition\ The\ input\ string\ is\ a\ valid\ infix\ expression\ containing\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ only\ binary\ plus,\ binary\ minus,\ multiplication,\ division,\ or\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ modulo.\ Only\ base10\ decimal\ numbers\ are\ supported\n\ @param\ expr\ valid\ expression\ in\ infix\ form\n\ @return\ equivalent\ expression\ in\ postfix\ form\n
comment9.params=c
comment9.target=double\ valueOf(java.lang.String)
comment9.text=\n\ Converts\ a\ single-character\ string\ to\ it's\ value\ as\ a\ double\n\ such\ that\ '1'\ ->\ 1\n\ @param\ c\ Single\ character\ digit\ string\n\ @return\ The\ number\ the\ character\ represents\n
numComments=14
